# Carregar bibliotecas necessárias
library(dplyr)
library(ggplot2)

# Ler os dados
airline_data <- read.csv("C:\\r\\flight\\Airline Dataset.csv")

# Análise de Gênero por Nacionalidade para os 10 principais países

# Contar viajantes por gênero e nacionalidade
gender_by_country <- airline_data %>%
  group_by(Nationality, Gender) %>%
  summarise(Count = n())

# Calcular o total de viajantes por país
total_by_country <- airline_data %>%
  group_by(Nationality) %>%
  summarise(Total = n())

# Calcular a porcentagem de gênero por país
gender_by_country <- inner_join(gender_by_country, total_by_country, by = "Nationality") %>%
  mutate(Percentage = (Count / Total) * 100)

# Filtrar para os 10 principais países
top_10_countries <- airline_data %>%
  count(Nationality) %>%
  arrange(desc(n)) %>%
  head(10) %>%
  pull(Nationality)

gender_by_country_top_10 <- filter(gender_by_country, Nationality %in% top_10_countries)

# Salvar a tabela como CSV
write.csv(gender_by_country_top_10, "gender_by_country_top_10.csv")

# Criar um gráfico de barras da porcentagem de gênero para os 10 principais países
gg <- ggplot(gender_by_country_top_10, aes(x = Nationality, y = Percentage, fill = Gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Gender Distribution by Nationality in Top 10 Countries",
       x = "Country",
       y = "Percentage") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Salvar o gráfico como uma imagem
ggsave("gender_distribution_top_10_countries.png", gg, width = 10, height = 6)

# Análise do Fluxo de Voos por País de Origem do Aeroporto

# Contar o número de voos por país de origem do aeroporto
flight_count <- airline_data %>%
  group_by(`Airport.Country.Code`) %>%  # Atenção ao nome da coluna corrigido
  summarise(Count = n())

# Ordenar para encontrar os 10 principais países em termos de fluxo de voos
top_10_flight_countries <- flight_count %>%
  arrange(desc(Count)) %>%
  head(10)

# Salvar a tabela como CSV
write.csv(top_10_flight_countries, "top_10_flight_countries.csv")

# Criar um gráfico de barras para os 10 principais países em termos de fluxo de voos
gg_flights <- ggplot(top_10_flight_countries, aes(x = `Airport.Country.Code`, y = Count)) +  # Atenção ao nome da coluna corrigido
  geom_bar(stat = "identity") +
  labs(title = "Top 10 Countries by Flight Count",
       x = "Country Code",
       y = "Flight Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Salvar o gráfico como uma imagem
ggsave("top_10_flight_countries.png", gg_flights, width = 10, height = 6)



# Carregar bibliotecas necessárias


# Contar o número de ocorrências de cada status do voo por aeroporto
flight_status_by_airport <- airline_data %>%
  group_by(`Airport.Name`, `Flight.Status`) %>%
  summarise(Count = n()) %>%
  arrange(desc(Count))

# Filtrar para atrasos e cancelamentos
delays_by_airport <- filter(flight_status_by_airport, `Flight.Status` == "Delayed")
cancellations_by_airport <- filter(flight_status_by_airport, `Flight.Status` == "Cancelled")

# Salvar as tabelas como CSV
write.csv(delays_by_airport, "delays_by_airport.csv")
write.csv(cancellations_by_airport, "cancellations_by_airport.csv")

# Criar gráficos de barras
gg_delays <- ggplot(delays_by_airport, aes(x = reorder(`Airport.Name`, -Count), y = Count)) +
  geom_bar(stat = "identity") +
  labs(title = "Airports with Most Delays",
       x = "Airport Name",
       y = "Number of Delays") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

gg_cancellations <- ggplot(cancellations_by_airport, aes(x = reorder(`Airport.Name`, -Count), y = Count)) +
  geom_bar(stat = "identity") +
  labs(title = "Airports with Most Cancellations",
       x = "Airport Name",
       y = "Number of Cancellations") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Salvar os gráficos como imagens
ggsave("airports_with_most_delays.png", gg_delays, width = 10, height = 6)
ggsave("airports_with_most_cancellations.png", gg_cancellations, width = 10, height = 6)



total_flights_by_airport <- airline_data %>%
  group_by(`Airport.Name`) %>%
  summarise(`Total Flights` = n())

# Contar o número de voos atrasados por aeroporto
delayed_flights_by_airport <- airline_data %>%
  filter(`Flight.Status` == "Delayed") %>%
  group_by(`Airport.Name`) %>%
  summarise(`Delayed Flights` = n())

# Calcular a porcentagem de voos atrasados por aeroporto
delayed_percentage_by_airport <- left_join(total_flights_by_airport, delayed_flights_by_airport, by = "Airport.Name") %>%
  mutate(`Delayed Flights` = ifelse(is.na(`Delayed Flights`), 0, `Delayed Flights`),
         `Delayed Percentage` = (`Delayed Flights` / `Total Flights`) * 100)

# Salvar a tabela como CSV
write.csv(delayed_percentage_by_airport, "delayed_percentage_by_airport.csv")
