# Ler arquivo CSV
meu_dataset <- read.csv("C:\r\flight\Airline Dataset.csv)
meu_dataset <- read.csv("C:/r/flight/Airline Dataset.csv")
View(meu_dataset)
# Carregar bibliotecas necessárias
library(dplyr)
library(ggplot2)
# Ler os dados
# Substitua pelo seu próprio caminho de arquivo, se necessário
airline_data <- read.csv("Airline Dataset.csv")
# Calcular o total de linhas
total_rows <- nrow(airline_data)
# Contar as ocorrências de cada país e calcular a porcentagem
country_count <- airline_data %>%
group_by(Country.Name) %>%
summarise(count = n()) %>%
mutate(percentage = (count / total_rows) * 100)
# Identificar países com menos de 1% das ocorrências e agrupá-los como "Outros"
threshold <- 1
country_count <- country_count %>%
mutate(Country.Name = ifelse(percentage < threshold, "Outros", Country.Name))
# Agregar novamente para somar os "Outros"
final_count <- country_count %>%
group_by(Country.Name) %>%
summarise(total_count = sum(count), total_percentage = sum(percentage))
# Criar gráfico
ggplot(final_count, aes(x = reorder(Country.Name, -total_count), y = total_count)) +
geom_bar(stat = "identity") +
labs(title = "Distribuição de Países", x = "País", y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(country_count)
View(final_count)
View(meu_dataset)
View(country_count)
View(country_count)
library(dplyr)
library(ggplot2)
airline_data <- read.csv("caminho/para/Airline Dataset.csv")
traveler_count <- airline_data %>%
group_by(Country.Name) %>%
summarise(count = n())
# Ordenar para encontrar os maiores grupos
traveler_count <- traveler_count %>% arrange(desc(count))
View(traveler_count)
View(airline_data)
flight_count <- airline_data %>%
group_by(Flight.Country) %>%
summarise(count = n())
# Ordenar para encontrar os maiores grupos
traveler_count <- traveler_count %>% arrange(desc(count))
flight_count <- airline_data %>%
group_by(Flight.Country) %>%
summarise(count = n())
traveler_count <- airline_data %>%
group_by(Country.Name) %>%
summarise(count = n())
flight_count <- airline_data %>%
group_by(Flight.Country) %>%
summarise(count = n())
traveler_count <- airline_data %>%
group_by(Country.Name) %>%
summarise(count = n())
flight_count <- airline_data %>%
group_by(Flight.Country) %>%
summarise(count = n())
traveler_count <- airline_data %>%
group_by(Country.Name) %>%
summarise(count = n())
flight_count <- airline_data %>%
group_by(Flight.Country) %>%
summarise(count = n())
names(airline_data)
library(ggplot2)
traveler_count <- airline_data %>%
group_by(Nationality) %>%
summarise(count = n())
# Ordenar para encontrar os maiores grupos
traveler_count <- traveler_count %>% arrange(desc(count))
View(traveler_count)
flight_count <- airline_data %>%
group_by(Airport.Country.Code) %>%
summarise(count = n())
# Ordenar para encontrar os países com maior fluxo
flight_count <- flight_count %>% arrange(desc(count))
View(final_count)
# Viajantes por nacionalidade
ggplot(traveler_count, aes(x = reorder(Nationality, -count), y = count)) +
geom_bar(stat = "identity") +
labs(title = "Distribuição de Viajantes por Nacionalidade")
# Fluxo de voos por país de origem
ggplot(flight_count, aes(x = reorder(Airport.Country.Code, -count), y = count)) +
geom_bar(stat = "identity") +
labs(title = "Fluxo de Voos por País de Origem")
View(traveler_count)
View(meu_dataset)
# Contar viajantes por gênero e nacionalidade
gender_by_country <- airline_data %>%
group_by(Nationality, Gender) %>%
summarise(Count = n())
# Calcular o total de viajantes por país
total_by_country <- airline_data %>%
group_by(Nationality) %>%
summarise(Total = n())
# Calcular a porcentagem de gênero por país
gender_by_country <- inner_join(gender_by_country, total_by_country, by = "Nationality") %>%
mutate(Percentage = (Count / Total) * 100)
# Filtrar para os 10 principais países
top_10_countries <- airline_data %>%
count(Nationality) %>%
arrange(desc(n)) %>%
head(10) %>%
pull(Nationality)
gender_by_country_top_10 <- filter(gender_by_country, Nationality %in% top_10_countries)
# Salvar a tabela como CSV
write.csv(gender_by_country_top_10, "gender_by_country_top_10.csv")
# Criar um gráfico de barras da porcentagem de gênero para os 10 principais países
gg <- ggplot(gender_by_country_top_10, aes(x = Nationality, y = Percentage, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gender Distribution by Nationality in Top 10 Countries",
x = "Country",
y = "Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Salvar o gráfico como uma imagem
ggsave("gender_distribution_top_10_countries.png", gg, width = 10, height = 6)
# Contar viajantes por gênero e nacionalidade
gender_by_country <- airline_data %>%
group_by(Nationality, Gender) %>%
summarise(Count = n())
# Carregar bibliotecas necessárias
library(dplyr)
library(ggplot2)
# Ler os dados
airline_data <- read.csv(""C:\\r\\flight\\Airline Dataset.csv"")
# Carregar bibliotecas necessárias
library(dplyr)
library(ggplot2)
# Ler os dados
airline_data <- read.csv("C:\\r\\flight\\Airline Dataset.csv")
# Análise de Gênero por Nacionalidade para os 10 principais países
# Contar viajantes por gênero e nacionalidade
gender_by_country <- airline_data %>%
group_by(Nationality, Gender) %>%
summarise(Count = n())
# Calcular o total de viajantes por país
total_by_country <- airline_data %>%
group_by(Nationality) %>%
summarise(Total = n())
# Calcular a porcentagem de gênero por país
gender_by_country <- inner_join(gender_by_country, total_by_country, by = "Nationality") %>%
mutate(Percentage = (Count / Total) * 100)
# Filtrar para os 10 principais países
top_10_countries <- airline_data %>%
count(Nationality) %>%
arrange(desc(n)) %>%
head(10) %>%
pull(Nationality)
gender_by_country_top_10 <- filter(gender_by_country, Nationality %in% top_10_countries)
# Salvar a tabela como CSV
write.csv(gender_by_country_top_10, "gender_by_country_top_10.csv")
# Criar um gráfico de barras da porcentagem de gênero para os 10 principais países
gg <- ggplot(gender_by_country_top_10, aes(x = Nationality, y = Percentage, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gender Distribution by Nationality in Top 10 Countries",
x = "Country",
y = "Percentage") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Salvar o gráfico como uma imagem
ggsave("gender_distribution_top_10_countries.png", gg, width = 10, height = 6)
View(gender_by_country)
View(gender_by_country)
View(gender_by_country_top_10)
View(gg)
View(total_by_country)
flight_count <- airline_data %>%
group_by(`Airport Country Code`) %>%
summarise(Count = n())
# Análise do Fluxo de Voos por País de Origem do Aeroporto
# Contar o número de voos por país de origem do aeroporto
flight_count <- airline_data %>%
group_by(`Airport.Country.Code`) %>%  # Atenção ao nome da coluna corrigido
summarise(Count = n())
# Ordenar para encontrar os 10 principais países em termos de fluxo de voos
top_10_flight_countries <- flight_count %>%
arrange(desc(Count)) %>%
head(10)
# Salvar a tabela como CSV
write.csv(top_10_flight_countries, "top_10_flight_countries.csv")
# Criar um gráfico de barras para os 10 principais países em termos de fluxo de voos
gg_flights <- ggplot(top_10_flight_countries, aes(x = `Airport.Country.Code`, y = Count)) +  # Atenção ao nome da coluna corrigido
geom_bar(stat = "identity") +
labs(title = "Top 10 Countries by Flight Count",
x = "Country Code",
y = "Flight Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Salvar o gráfico como uma imagem
ggsave("top_10_flight_countries.png", gg_flights, width = 10, height = 6)
View(gender_by_country)
View(airline_data)
# Carregar bibliotecas necessárias
library(dplyr)
library(ggplot2)
# Ler os dados
airline_data <- read.csv("caminho/para/Airline Dataset.csv")
flight_status_by_airport <- airline_data %>%
group_by(`Airport.Name`, `Flight.Status`) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Filtrar para atrasos e cancelamentos
delays_by_airport <- filter(flight_status_by_airport, `Flight.Status` == "Delayed")
cancellations_by_airport <- filter(flight_status_by_airport, `Flight.Status` == "Cancelled")
# Salvar as tabelas como CSV
write.csv(delays_by_airport, "delays_by_airport.csv")
write.csv(cancellations_by_airport, "cancellations_by_airport.csv")
# Criar gráficos de barras
gg_delays <- ggplot(delays_by_airport, aes(x = reorder(`Airport.Name`, -Count), y = Count)) +
geom_bar(stat = "identity") +
labs(title = "Airports with Most Delays",
x = "Airport Name",
y = "Number of Delays") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
gg_cancellations <- ggplot(cancellations_by_airport, aes(x = reorder(`Airport.Name`, -Count), y = Count)) +
geom_bar(stat = "identity") +
labs(title = "Airports with Most Cancellations",
x = "Airport Name",
y = "Number of Cancellations") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Salvar os gráficos como imagens
ggsave("airports_with_most_delays.png", gg_delays, width = 10, height = 6)
ggsave("airports_with_most_cancellations.png", gg_cancellations, width = 10, height = 6)
View(total_by_country)
View(top_10_flight_countries)
View(gg_cancellations)
flight_status_by_airport <- airline_data %>%
group_by(`Airport.Name`, `Flight.Status`) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# Filtrar para atrasos e cancelamentos
delays_by_airport <- filter(flight_status_by_airport, `Flight.Status` == "Delayed")
cancellations_by_airport <- filter(flight_status_by_airport, `Flight.Status` == "Cancelled")
# Salvar as tabelas como CSV
write.csv(delays_by_airport, "delays_by_airport.csv")
write.csv(cancellations_by_airport, "cancellations_by_airport.csv")
# Criar gráficos de barras
gg_delays <- ggplot(delays_by_airport, aes(x = reorder(`Airport.Name`, -Count), y = Count)) +
geom_bar(stat = "identity") +
labs(title = "Airports with Most Delays",
x = "Airport Name",
y = "Number of Delays") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
gg_cancellations <- ggplot(cancellations_by_airport, aes(x = reorder(`Airport.Name`, -Count), y = Count)) +
geom_bar(stat = "identity") +
labs(title = "Airports with Most Cancellations",
x = "Airport Name",
y = "Number of Cancellations") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Salvar os gráficos como imagens
ggsave("airports_with_most_delays.png", gg_delays, width = 10, height = 6)
ggsave("airports_with_most_cancellations.png", gg_cancellations, width = 10, height = 6)
View(cancellations_by_airport)
View(gg_delays)
View(gg_flights)
View(cancellations_by_airport)
View(delays_by_airport)
total_flights_by_airport <- airline_data %>%
group_by(`Airport.Name`) %>%
summarise(`Total Flights` = n())
# Contar o número de voos atrasados por aeroporto
delayed_flights_by_airport <- airline_data %>%
filter(`Flight.Status` == "Delayed") %>%
group_by(`Airport.Name`) %>%
summarise(`Delayed Flights` = n())
# Calcular a porcentagem de voos atrasados por aeroporto
delayed_percentage_by_airport <- left_join(total_flights_by_airport, delayed_flights_by_airport, by = "Airport.Name") %>%
mutate(`Delayed Flights` = ifelse(is.na(`Delayed Flights`), 0, `Delayed Flights`),
`Delayed Percentage` = (`Delayed Flights` / `Total Flights`) * 100)
# Salvar a tabela como CSV
write.csv(delayed_percentage_by_airport, "delayed_percentage_by_airport.csv")
View(total_flights_by_airport)
View(delayed_flights_by_airport)
View(delayed_percentage_by_airport)
View(airline_data)
View(total_flights_by_airport)
View(total_by_country)
View(cancellations_by_airport)
View(delayed_percentage_by_airport)
View(delays_by_airport)
View(airline_data)
View(gg)
